# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2019-01-03 06:37
from __future__ import unicode_literals

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('warn_cpu_oversubscription_pct', models.IntegerField(verbose_name='Warn cpu oversubscription pct')),
                ('alert_cpu_oversubscription_pct', models.IntegerField(verbose_name='Alert cpu oversubscription pct')),
                ('lca_cpu_oversubscription_pct', models.IntegerField(verbose_name='Lca cpu oversubscription pct')),
                ('make_unavailable_cpu_oversubscription_pct', models.IntegerField(verbose_name='Make unavailable cpu oversubscription pct')),
                ('last_known_cpu_oversubscription_pct', models.IntegerField(verbose_name='Last known cpu oversubscription pct')),
                ('warn_memory_oversubscription_pct', models.IntegerField(verbose_name='Warn memory oversubscription pct')),
                ('alert_memory_oversubscription_pct', models.IntegerField(verbose_name='Alert memory oversubscription pct')),
                ('lca_memory_oversubscription_pct', models.IntegerField(verbose_name='Lca memory oversubscription pct')),
                ('make_unavailable_memory_oversubscription_pct', models.IntegerField(verbose_name='Make unavailable memory oversubscription pct')),
                ('last_known_memory_oversubscription_pct', models.IntegerField(verbose_name='Last known memory oversubscription pct')),
                ('max_num_of_rdm', models.IntegerField(verbose_name='Max num of rdm')),
                ('warn_rdm_oversubscription_pct', models.IntegerField(verbose_name='Warn rdm oversubscription pct')),
                ('alert_rdm_oversubscription_pct', models.IntegerField(verbose_name='Alert rdm oversubscription pct')),
                ('lca_rdm_oversubscription_pct', models.IntegerField(verbose_name='Lca rdm oversubscription pct')),
                ('make_unavailable_rdm_oversubscription_pct', models.IntegerField(verbose_name='Make unavailable rdm oversubscription pct')),
                ('last_known_num_of_rdm', models.IntegerField(verbose_name='Last known num of rdm')),
                ('asset_tag', models.CharField(max_length=200, verbose_name='Asset tag')),
                ('capacity_team_model_name', models.CharField(max_length=200, verbose_name='Capacity team model name')),
                ('capacity_team_device_registration_name', models.CharField(max_length=200, verbose_name='Capacity team device registration name')),
                ('manual_override', models.BooleanField(verbose_name='Manual override')),
                ('annotation', models.TextField(verbose_name='Annotation')),
                ('last_updated_on', models.DateTimeField(verbose_name='Last updated on')),
            ],
            options={
                'db_table': 'cluster',
                'verbose_name': 'Cluster',
                'verbose_name_plural': 'Clusters',
            },
        ),
        migrations.CreateModel(
            name='ClusterAvailabilityLevel',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'cluster_availability_level',
                'verbose_name': 'Cluster availability levels',
                'verbose_name_plural': 'Cluster availability levels',
            },
        ),
        migrations.CreateModel(
            name='ClusterCpuOversubscription',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'cluster_cpu_oversubscription',
                'verbose_name': 'Cluster cpu oversubscription',
                'verbose_name_plural': 'Cluster cpu oversubscriptions',
            },
        ),
        migrations.CreateModel(
            name='ClusterMemoryOversubscription',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'cluster_memory_oversubscription',
                'verbose_name': 'cluster memory oversubscription',
                'verbose_name_plural': 'Cluster memory oversubscriptions',
            },
        ),
        migrations.CreateModel(
            name='Cpg',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('display_name', models.CharField(max_length=50, verbose_name='Display name')),
                ('domain', models.CharField(max_length=50, verbose_name='Domain')),
                ('the_volume_set_must_be_used', models.BooleanField(verbose_name='The volume set must be used')),
                ('dedicated_to_a_tenant', models.BooleanField(verbose_name='Dedicated to a tenant')),
                ('virtual_volume_set', models.CharField(max_length=100, verbose_name='Virtual volume set')),
                ('highly_available', models.BooleanField(verbose_name='Highly available')),
                ('dr_replication', models.BooleanField(verbose_name='Dr replication')),
            ],
            options={
                'db_table': 'cpg',
                'verbose_name': 'Cpg',
                'verbose_name_plural': 'Cpgs',
            },
        ),
        migrations.CreateModel(
            name='CpuArchitecture',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('cores', models.IntegerField(verbose_name='Cores')),
                ('threads', models.IntegerField(verbose_name='Threads')),
                ('max_hana_prod_vms_per_socket', models.IntegerField(verbose_name='Max hana prod vms per socket')),
            ],
            options={
                'db_table': 'cpu_architecture',
                'verbose_name': 'Cpu architecture',
                'verbose_name_plural': 'Cpu architectures',
            },
        ),
        migrations.CreateModel(
            name='CustomCpuValue',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('vcpu', models.IntegerField(verbose_name='Vcpu')),
                ('socket', models.IntegerField(verbose_name='Socket')),
                ('cpuarchitecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CpuArchitecture', verbose_name='Cpuarchitecture')),
            ],
            options={
                'db_table': 'custom_cpu_value',
                'verbose_name': 'Custom cpu value',
                'verbose_name_plural': 'Custom cpu values',
            },
        ),
        migrations.CreateModel(
            name='CustomRamAnge',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('ram_start', models.IntegerField(verbose_name='Ram start')),
                ('ram_end', models.IntegerField(verbose_name='Ram end')),
                ('steps', models.IntegerField(verbose_name='Steps')),
                ('unit', models.CharField(max_length=20, verbose_name='Unit')),
            ],
            options={
                'db_table': 'custom_ram_range',
                'verbose_name': 'Custom ram range',
                'verbose_name_plural': 'Custom ram ranges',
            },
        ),
        migrations.CreateModel(
            name='CustomSize',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('customcpuvalue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CustomCpuValue', verbose_name='Customcpuvalue')),
                ('customramrange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CustomRamAnge', verbose_name='Customramrange')),
            ],
            options={
                'db_table': 'CustomSize',
                'verbose_name': 'Custom size',
                'verbose_name_plural': 'Custom Size',
            },
        ),
        migrations.CreateModel(
            name='DatabaseType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'database_type',
                'verbose_name': 'Database type',
                'verbose_name_plural': 'Database types',
            },
        ),
        migrations.CreateModel(
            name='DataCenter',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('legacy_vpc_name', models.CharField(max_length=20, verbose_name='Legacy vpc name')),
                ('display_name', models.CharField(max_length=20, verbose_name='Display name')),
                ('region', models.CharField(max_length=100, verbose_name='Region')),
                ('country_code', models.CharField(max_length=20, verbose_name='Country code')),
                ('timezone', models.CharField(max_length=20, verbose_name='Timezone')),
                ('dual_dc_pair', models.BooleanField(verbose_name='Dual dc pair')),
                ('secondary_site', models.BooleanField(verbose_name='Secondary site ')),
                ('pci_enabled', models.BooleanField(verbose_name='Pci enabled')),
                ('disaster_recovery_enabled', models.BooleanField(verbose_name='Disaster recovery enabled')),
                ('disaster_recovery_site_name', models.CharField(max_length=100, verbose_name='Disaster recovery site name')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('iso_3166_01_code', models.CharField(max_length=100, verbose_name='Iso 3166 01 code')),
                ('location_currency_code', models.CharField(max_length=100, verbose_name='Location currency code')),
                ('location_currency_symbol', models.CharField(max_length=100, verbose_name='Location currency symbol')),
                ('location', models.CharField(max_length=100, verbose_name='Location')),
                ('service_delivery_manager_name', models.CharField(max_length=100, verbose_name='Service delivery manager name')),
                ('service_delivery_manager_email', models.EmailField(max_length=254, verbose_name='Service delivery manager email ')),
                ('site_technical_coordinator_name', models.CharField(max_length=100, verbose_name='Site technical coordinator name')),
                ('site_technical_coordinator_email', models.EmailField(max_length=254, verbose_name='Site technical coordinator email')),
                ('provisioning_coordinator_name', models.CharField(max_length=100, verbose_name='Provisioning coordinator name')),
                ('provisioning_coordinator_email', models.EmailField(max_length=254, verbose_name='Provisioning coordinator email')),
            ],
            options={
                'db_table': 'data_center',
                'verbose_name': 'Data center',
                'verbose_name_plural': 'Data centers',
            },
        ),
        migrations.CreateModel(
            name='Datastore',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=50, verbose_name='Display name')),
                ('name', models.CharField(max_length=50, verbose_name='')),
                ('dr_replication', models.BooleanField(verbose_name='Dr replication')),
                ('dedicated_to_a_tenant', models.BooleanField(verbose_name='Dedicated to a tenant')),
                ('total_capacity', models.BooleanField(verbose_name='Total capacity')),
                ('reserved_capacity', models.IntegerField(verbose_name='Reserved capacity')),
                ('warn_pct', models.IntegerField(verbose_name='Warn pct')),
                ('alert_pct', models.IntegerField(verbose_name='Alert pct')),
                ('lca_pct', models.IntegerField(verbose_name='Lca pct')),
                ('make_unavailable_pct', models.IntegerField(verbose_name='Make unavailable pct')),
                ('last_known_oversubscription_pct', models.IntegerField(verbose_name='Last known oversubscription pct')),
                ('warn_vmdk_pct', models.IntegerField(verbose_name='Warn vmdk pct')),
                ('alert_vmdk_pct', models.IntegerField(verbose_name='Alert vmdk pct')),
                ('lca_vmdk_pct', models.IntegerField(verbose_name='Lca vmdk pct')),
                ('make_unavailable_vmdk_pct', models.IntegerField(verbose_name='Make unavailable vmdk pct')),
                ('last_known_vmdk_pct', models.IntegerField(verbose_name='Last known vmdk pct')),
                ('manual_override', models.BooleanField(verbose_name='Manual override')),
                ('last_updated_on', models.DateTimeField(verbose_name='Last updated on')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Cluster', verbose_name='Cluster')),
            ],
            options={
                'db_table': 'datastore',
                'verbose_name': 'Datastore',
                'verbose_name_plural': 'Datastores',
            },
        ),
        migrations.CreateModel(
            name='DisasterRecoveryTenancy',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'disaster_recovery_tenancy',
                'verbose_name': 'Disaster recovery tenancy',
                'verbose_name_plural': 'Disaster recovery tenancys',
            },
        ),
        migrations.CreateModel(
            name='EncryptionState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'encryption_state',
                'verbose_name': 'Encryption state',
                'verbose_name_plural': 'Encryption states',
            },
        ),
        migrations.CreateModel(
            name='EsxHost',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('fqdn', models.CharField(max_length=100, verbose_name='Fqdn')),
                ('socket', models.IntegerField(verbose_name='Socket')),
                ('hyperthreading', models.BooleanField(verbose_name='Hyperthreading')),
                ('ram', models.IntegerField(verbose_name='Ram')),
                ('asset_tag', models.CharField(max_length=100, verbose_name='Asset tag')),
                ('capacity_team_model_name', models.CharField(max_length=100, verbose_name='Capacity team model name')),
                ('capacity_team_device_registration_name', models.CharField(max_length=100, verbose_name='Capacity team device registration name')),
                ('annotation', models.TextField(verbose_name='Annotation')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Cluster', verbose_name='Cluster')),
                ('cpuarchitecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CpuArchitecture', verbose_name='Cpuarchitecture')),
            ],
            options={
                'db_table': 'esx_host',
                'verbose_name': 'Esx host',
                'verbose_name_plural': 'Esx Hosts',
            },
        ),
        migrations.CreateModel(
            name='EsxHostCpuOversubscription',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'esx_host_cpu_oversubscription',
                'verbose_name': 'Esx host cpu oversubscription',
                'verbose_name_plural': 'Esx host cpu oversubscriptions',
            },
        ),
        migrations.CreateModel(
            name='EsxHostMemoryOversubscription',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'esx_host_memory_oversubscription',
                'verbose_name': 'Esx host memory oversubscriptions',
                'verbose_name_plural': 'Esx host memory oversubscriptions',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, verbose_name='Username')),
                ('incident', models.CharField(max_length=50, verbose_name='Incident')),
                ('message', models.TextField(verbose_name='Message')),
            ],
            options={
                'db_table': 'event',
                'verbose_name': 'Event',
                'verbose_name_plural': 'Event',
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'event_category',
                'verbose_name': 'Event category',
                'verbose_name_plural': 'Event categorys',
            },
        ),
        migrations.CreateModel(
            name='EventCode',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('template', models.TextField(verbose_name='Template')),
                ('reference_code', models.CharField(max_length=100, verbose_name='Reference code')),
                ('summary', models.CharField(max_length=100, verbose_name='Summary')),
                ('description', models.TextField(verbose_name='Description')),
                ('annotation', models.TextField(verbose_name='Annotation')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EventCategory', verbose_name='Category')),
            ],
            options={
                'db_table': 'event_code',
                'verbose_name': 'Event code',
                'verbose_name_plural': 'Event codes',
            },
        ),
        migrations.CreateModel(
            name='EventOrigin',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'event_origin',
                'verbose_name': 'Event origin',
                'verbose_name_plural': 'Event origins',
            },
        ),
        migrations.CreateModel(
            name='Eventource',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'event_source',
                'verbose_name': 'Event source',
                'verbose_name_plural': 'Event sources',
            },
        ),
        migrations.CreateModel(
            name='Eventtatus',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'event_status',
                'verbose_name': 'Event status',
                'verbose_name_plural': 'Event statuss',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'event_type',
                'verbose_name': 'Event type',
                'verbose_name_plural': 'Event types',
            },
        ),
        migrations.CreateModel(
            name='HostState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'host_state',
                'verbose_name': 'Host state',
                'verbose_name_plural': 'Host states',
            },
        ),
        migrations.CreateModel(
            name='Hp3par',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('ip', models.CharField(max_length=100, verbose_name='Ip')),
                ('url', models.URLField(verbose_name='Url')),
                ('username', models.CharField(max_length=50, verbose_name='Username')),
                ('password', models.CharField(max_length=50, verbose_name='Password')),
                ('asset_tag', models.CharField(max_length=100, verbose_name='Asset tag')),
                ('capacity_team_model_name', models.CharField(max_length=100, verbose_name='Capacity team model name')),
                ('capacity_tea_device_registration_name', models.CharField(max_length=100, verbose_name='Capacity tea device registration name')),
                ('manual_override', models.BooleanField(verbose_name='Manual override')),
                ('annotation', models.TextField(verbose_name='Annotation')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
            ],
            options={
                'db_table': 'hp3par',
                'verbose_name': 'Hp3par',
                'verbose_name_plural': 'Hp3pars',
            },
        ),
        migrations.CreateModel(
            name='Hp3parCapacity',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('total_capacity', models.IntegerField(verbose_name='Total capacity')),
                ('reserved_capacity', models.IntegerField(verbose_name='Reserved capacity')),
                ('free_capacity', models.IntegerField(verbose_name='Free capacity')),
                ('warn_pct', models.IntegerField(verbose_name='Warn pct')),
                ('alert_pct', models.IntegerField(verbose_name='Alert pct')),
                ('lca_pct', models.IntegerField(verbose_name='Lca pct')),
                ('make_unavailable_pct', models.IntegerField(verbose_name='Make unavailable pct')),
                ('warn_phy_pct', models.IntegerField(verbose_name='Warn phy pct')),
                ('alert_phy_pct', models.IntegerField(verbose_name='Alert phy pct')),
                ('lca_phy_pct', models.IntegerField(verbose_name='Lca phy pct')),
                ('make_unavailable_phy_pct', models.IntegerField(verbose_name='Make unavailable phy pct')),
                ('last_known_tier_oversubscription_pct', models.IntegerField(verbose_name='Last known tier oversubscription pct')),
                ('last_known_tier_utilization_pct', models.IntegerField(verbose_name='Last known tier utilization pct')),
                ('last_updated_on', models.DateTimeField(verbose_name='Last updated on')),
                ('hp3par', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Hp3par', verbose_name='Hp3par')),
            ],
            options={
                'db_table': 'hp3par_capacity',
                'verbose_name': 'Hp3par capacity',
                'verbose_name_plural': 'Hp3par capacitys',
            },
        ),
        migrations.CreateModel(
            name='Hp3parPair',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('dr_partner_array_name', models.CharField(max_length=50, verbose_name='Dr partner array name')),
                ('zone1_3par', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Hp3parPair_zone1_3par', to='SOD_LVM.Hp3par', verbose_name='Zone1 3par')),
                ('zone2_3par', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Hp3parPair_zone2_3par', to='SOD_LVM.Hp3par', verbose_name='Zone2 3par')),
            ],
            options={
                'db_table': 'hp3par_pair',
                'verbose_name': 'Hp3par pair',
                'verbose_name_plural': 'Hp3par pairs',
            },
        ),
        migrations.CreateModel(
            name='Hp3parTier',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'hp3par_tier',
                'verbose_name': 'Hp3par tier',
                'verbose_name_plural': 'Hp3par Tier',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('supported_for_hana', models.BooleanField(verbose_name='Supported for hana')),
            ],
            options={
                'db_table': 'image',
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
        ),
        migrations.CreateModel(
            name='InstanceHost',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=100, verbose_name='Hostname')),
                ('fqdn', models.CharField(max_length=100, verbose_name='Fqdn')),
                ('core', models.IntegerField(verbose_name='Core')),
                ('socket', models.IntegerField(verbose_name='Socket')),
                ('cpucount', models.IntegerField(verbose_name='Cpucount')),
                ('memory', models.IntegerField(verbose_name='Memory')),
                ('is_user_defined_size', models.BooleanField(verbose_name='Is user defined size')),
                ('saps', models.IntegerField(verbose_name='Saps')),
                ('administrator_name', models.CharField(max_length=100, verbose_name='Administrator name')),
                ('administrator_password', models.CharField(max_length=100, verbose_name='Administrator password')),
                ('production_vlan_ip_address', models.CharField(max_length=100, verbose_name='Production vlan ip address')),
                ('hsr_vlan_ip_address', models.CharField(max_length=100, verbose_name='Hsr vlan ip address')),
                ('internal_management_vlan_ip_address', models.CharField(max_length=100, verbose_name='Internal management vlan ip address')),
                ('backup_enabled', models.BooleanField(verbose_name='Backup enabled')),
                ('is_goe_provisioned', models.BooleanField(verbose_name='Is goe provisioned')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Cluster', verbose_name='Cluster')),
                ('cpuarchitecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CpuArchitecture', verbose_name='Cpuarchitecture')),
                ('datastore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Datastore', verbose_name='Datastore')),
                ('encryption_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EncryptionState', verbose_name='Encryption state')),
                ('esxhost', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EsxHost', verbose_name='Esxhost')),
            ],
            options={
                'db_table': 'instance_host',
                'verbose_name': 'Instance host',
                'verbose_name_plural': 'Instance hosts',
            },
        ),
        migrations.CreateModel(
            name='InstanceHostNicConfig',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('instancehost', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.InstanceHost', verbose_name='Instancehost')),
            ],
            options={
                'db_table': 'instance_host_nic_config',
                'verbose_name': 'Instance host nic config',
                'verbose_name_plural': 'Instance host nic configs',
            },
        ),
        migrations.CreateModel(
            name='IpAddressAllocationPurpose',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('allocation_purpose', models.CharField(max_length=100, verbose_name='Allocation purpose')),
                ('value', models.CharField(max_length=50, verbose_name='Value')),
            ],
            options={
                'db_table': 'ipaddress_allocation_purpose',
                'verbose_name': 'Ipaddress allocation purpose',
                'verbose_name_plural': 'Ipaddress allocation purposes',
            },
        ),
        migrations.CreateModel(
            name='IpAddressAllocationState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('allocation_state', models.CharField(max_length=100, verbose_name='Allocation state')),
                ('value', models.CharField(max_length=50, verbose_name='Value')),
            ],
            options={
                'db_table': 'ip_address_allocation_state',
                'verbose_name': 'Ip address allocation state',
                'verbose_name_plural': 'Ip address allocation states',
            },
        ),
        migrations.CreateModel(
            name='IpAddressPool',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('ipv4_address', models.CharField(max_length=30, verbose_name='Ipv4 address')),
                ('ipv6_address', models.CharField(max_length=30, verbose_name='Ipv6 address')),
                ('hostname', models.CharField(max_length=50, verbose_name='Hostname')),
                ('dns_suffix', models.CharField(max_length=50, verbose_name='Dns suffix')),
                ('fqdn', models.CharField(max_length=50, verbose_name='Fqdn')),
                ('allocation_purpose', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.IpAddressAllocationPurpose', verbose_name='Allocation purpose')),
                ('allocation_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.IpAddressAllocationState', verbose_name='Allocation state')),
            ],
            options={
                'db_table': 'ip_address_pool',
                'verbose_name': 'Ip address pool',
                'verbose_name_plural': 'Ip address pools',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplate',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('lama_template_name', models.CharField(max_length=50, verbose_name='Lama template name')),
                ('lama_template_id', models.CharField(max_length=50, verbose_name='Lama template id')),
                ('request_description', models.TextField(verbose_name='Request description')),
                ('author_annotation', models.TextField(verbose_name='Author annotation')),
            ],
            options={
                'db_table': 'lama_template',
                'verbose_name': 'Lama template',
                'verbose_name_plural': 'Lama templates',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'lama_template_state',
                'verbose_name': 'Lama template state',
                'verbose_name_plural': 'Lama template states',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateStatus',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'lama_template_status',
                'verbose_name': 'Lama template status',
                'verbose_name_plural': 'Lama template statuss',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateTargetSid',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=20, verbose_name='Display name')),
                ('backup_enabled', models.BooleanField(verbose_name='Backup enabled')),
                ('highly_available', models.BooleanField(verbose_name='Highly available')),
                ('eu_data_privacy_support', models.BooleanField(verbose_name='Eu data privacy support')),
                ('disaster_recovery_enabled', models.BooleanField(verbose_name='Disaster recovery enabled')),
                ('hana_configuration', models.BooleanField(verbose_name='Hana configuration')),
                ('database_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DatabaseType', verbose_name='Database type')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
                ('disaster_recovery_infrastructure_tenancy_preference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DisasterRecoveryTenancy', verbose_name='Disaster recovery infrastructure tenancy preference')),
            ],
            options={
                'db_table': 'lama_template_target_sid',
                'verbose_name': 'Lama template target sids',
                'verbose_name_plural': 'Lama template target sidss',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateTargetSidInstanceHost',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=50, verbose_name='Hostname')),
                ('fqdn', models.CharField(max_length=50, verbose_name='Fqdn')),
                ('is_user_defined_size', models.BooleanField(verbose_name='Is user defined size')),
                ('socket', models.IntegerField(verbose_name='Socket')),
                ('core', models.IntegerField(verbose_name='Core')),
                ('cpucount', models.IntegerField(verbose_name='Cpucount')),
                ('memory', models.IntegerField(verbose_name='Memory')),
                ('production_vlan_ip_address', models.CharField(max_length=50, verbose_name='Production vlan ip address')),
                ('hsr_vlan_ip_address', models.CharField(max_length=50, verbose_name='Hsr vlan ip address')),
                ('internal_management_vlan_ip_address', models.CharField(max_length=50, verbose_name='Internal management vlan ip address')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Cluster', verbose_name='Cluster')),
                ('cpuarchitecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CpuArchitecture', verbose_name='Cpuarchitecture')),
                ('datastore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Datastore', verbose_name='Datastore')),
                ('encryption_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EncryptionState', verbose_name='Encryption state')),
            ],
            options={
                'db_table': 'lama_template_target_sid_instance_host',
                'verbose_name': 'Lama template target sid instance host',
                'verbose_name_plural': 'Lama template target sid instance hosts',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateTargetSidInstanceHostNicConfig',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('instancehost', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LamaTemplateTargetSidInstanceHost', verbose_name='Instancehost')),
                ('ip_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.IpAddressPool', verbose_name='Ip address')),
            ],
            options={
                'db_table': 'lama_template_target_sid_instance_host_nic_config',
                'verbose_name': 'Lama template target sid instance host nic config',
                'verbose_name_plural': 'Lama template target sid instance host nic configs',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateTargetSidService',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('instancehosts', models.ManyToManyField(to='SOD_LVM.LamaTemplateTargetSidInstanceHost', verbose_name='Instancehosts')),
            ],
            options={
                'db_table': 'lama_template_target_sid_service',
                'verbose_name': 'Lama template target sid service',
                'verbose_name_plural': 'Lama template target sid Service',
            },
        ),
        migrations.CreateModel(
            name='LamaTemplateTargetSidVolume',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=40, verbose_name='Display name')),
                ('size', models.IntegerField(verbose_name='Size')),
                ('cg_name', models.CharField(max_length=40, verbose_name='Vg name')),
                ('cpg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Cpg', verbose_name='Cpg')),
                ('datastore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Datastore', verbose_name='Datastore')),
                ('encryption_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EncryptionState', verbose_name='Encryption state')),
                ('instance_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LamaTemplateTargetSidInstanceHost', verbose_name='Instance host')),
            ],
            options={
                'db_table': 'lama_template_target_sid_volume',
                'verbose_name': 'Lama template target sid volume',
                'verbose_name_plural': 'Lama template target sid Volume',
            },
        ),
        migrations.CreateModel(
            name='LicenseEventType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'license_event_type',
                'verbose_name': 'License event type',
                'verbose_name_plural': 'License event types',
            },
        ),
        migrations.CreateModel(
            name='LifecycleAction',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
            ],
            options={
                'db_table': 'lifecycle_action',
                'verbose_name': 'Lifecycle actions',
                'verbose_name_plural': 'Lifecycle actions',
            },
        ),
        migrations.CreateModel(
            name='LifecycleActionType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'lifecycle_action_type',
                'verbose_name': 'Lifecycle action type',
                'verbose_name_plural': 'Lifecycle action types',
            },
        ),
        migrations.CreateModel(
            name='LifecycleState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'lifecycle_state',
                'verbose_name': 'Lifecycle state',
                'verbose_name_plural': 'Lifecycle states',
            },
        ),
        migrations.CreateModel(
            name='Lvm',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('lvm_host', models.CharField(max_length=50, verbose_name='Lvm host')),
                ('lvm_username', models.CharField(max_length=50, verbose_name='Lvm password')),
                ('lvm_password', models.CharField(max_length=50, verbose_name='Lvm password')),
                ('lvm_url', models.URLField(verbose_name='Lvm url')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
                ('lifecycle_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state')),
            ],
            options={
                'db_table': 'lvm',
                'verbose_name': 'Lvm',
                'verbose_name_plural': 'Lvms',
            },
        ),
        migrations.CreateModel(
            name='LvmLevel',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'lvm_level',
                'verbose_name': 'Lvm level',
                'verbose_name_plural': 'Lvm levels',
            },
        ),
        migrations.CreateModel(
            name='LvmType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'lvm_type',
                'verbose_name': 'Lvm type',
                'verbose_name_plural': 'Lvm types',
            },
        ),
        migrations.CreateModel(
            name='MacAddressAllocationState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'mac_address_allocation_state',
                'verbose_name': 'Mac address allocation state',
                'verbose_name_plural': 'Mac address allocation states',
            },
        ),
        migrations.CreateModel(
            name='MacAddressPool',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('mac_address', models.CharField(max_length=50, verbose_name='Mac address')),
                ('allocated_on', models.DateTimeField(verbose_name='Allocated on')),
                ('allocation_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MacAddressAllocationState', verbose_name='Allocation state')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
            ],
            options={
                'db_table': 'mac_address_pool',
                'verbose_name': 'Mac address pool',
                'verbose_name_plural': 'Mac address pools',
            },
        ),
        migrations.CreateModel(
            name='MigrationState',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'migration_state',
                'verbose_name': 'Migration state',
                'verbose_name_plural': 'Migration states',
            },
        ),
        migrations.CreateModel(
            name='NicType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('nic_id', models.CharField(max_length=50, verbose_name='Nic id')),
            ],
            options={
                'db_table': 'nic_type',
                'verbose_name': 'Nic type',
                'verbose_name_plural': 'Nic types',
            },
        ),
        migrations.CreateModel(
            name='OperatingSystem',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
                ('type', models.CharField(max_length=20, verbose_name='Type')),
                ('username', models.CharField(max_length=20, verbose_name='Username')),
                ('password', models.CharField(max_length=20, verbose_name='Password')),
                ('goe_os_version', models.CharField(max_length=100, verbose_name='Goe os version')),
                ('glance_id', models.CharField(max_length=50, verbose_name='Glance id')),
                ('location', models.CharField(max_length=50, verbose_name='Location')),
            ],
            options={
                'db_table': 'operating_system',
                'verbose_name': 'Operating system',
                'verbose_name_plural': 'Operating Systems',
            },
        ),
        migrations.CreateModel(
            name='OrderTracking',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('product_uuid', models.CharField(max_length=50, verbose_name='Product uuid')),
                ('product_name', models.CharField(max_length=50, verbose_name='Product name')),
                ('order_id', models.CharField(max_length=50, verbose_name='Order id')),
                ('order_uuid', models.CharField(max_length=50, verbose_name='Order uuid')),
                ('supplier_request_id', models.CharField(max_length=50, verbose_name='Supplier request id')),
                ('order_item_id', models.CharField(max_length=50, verbose_name='Order item id')),
                ('subscription_uuid', models.CharField(max_length=50, verbose_name='Subscription uuid')),
                ('subscription_instance_component_uuid', models.CharField(max_length=50, verbose_name='Subscription instance component uuid')),
                ('subscription_owner_id', models.CharField(max_length=50, verbose_name='Subscription owner id')),
            ],
            options={
                'db_table': 'order_tracking',
                'verbose_name': 'Order tracking',
                'verbose_name_plural': 'Order trackings',
            },
        ),
        migrations.CreateModel(
            name='SapOffering',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'sap_offering',
                'verbose_name': 'Sap offering',
                'verbose_name_plural': 'Sap offerings',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'service',
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Service_vip',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('ip_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.IpAddressPool', verbose_name='Ip address')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Service', verbose_name='Service')),
            ],
            options={
                'db_table': 'service_vip',
                'verbose_name': 'Service vip',
                'verbose_name_plural': 'Service vips',
            },
        ),
        migrations.CreateModel(
            name='ServiceLevel',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'service_level',
                'verbose_name': 'Service level',
                'verbose_name_plural': 'Service levels',
            },
        ),
        migrations.CreateModel(
            name='ServiceRole',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'service_role',
                'verbose_name': 'Service role',
                'verbose_name_plural': 'Service roles',
            },
        ),
        migrations.CreateModel(
            name='ServiceRoleDetail',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=50, verbose_name='Value')),
                ('includes_eao_sap_application_support', models.BooleanField(verbose_name='Includes eao sap application support')),
                ('service_logo', models.CharField(max_length=100, verbose_name='Service logo')),
                ('lifecycle_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state')),
                ('servicerole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceRole', verbose_name='Servicerole')),
            ],
            options={
                'db_table': 'service_role_detail',
                'verbose_name': 'Service role detail',
                'verbose_name_plural': 'Service role details',
            },
        ),
        migrations.CreateModel(
            name='SidLvmLicenseEvent',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EventType', verbose_name='Event type')),
                ('lvm_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LvmLevel', verbose_name='Lvm level')),
            ],
            options={
                'db_table': 'sid_lvm_license_event',
                'verbose_name': 'Sid lvm license event',
                'verbose_name_plural': 'Sid lvm license events',
            },
        ),
        migrations.CreateModel(
            name='SidOrigin',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'sid_origin',
                'verbose_name': 'Sid origin',
                'verbose_name_plural': 'Sid origins',
            },
        ),
        migrations.CreateModel(
            name='SidType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'sid_type',
                'verbose_name': 'Sid type',
                'verbose_name_plural': 'Sid types',
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('cpu', models.IntegerField(verbose_name='Cpu')),
                ('socket', models.IntegerField(verbose_name='SOcket')),
                ('ram', models.IntegerField(verbose_name='Ram')),
                ('system_disk', models.IntegerField(verbose_name='System disk')),
                ('cpuarchitecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.CpuArchitecture', verbose_name='Cpuarchitecture')),
                ('lifecycle_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state')),
            ],
            options={
                'db_table': 'size',
                'verbose_name': 'Size',
                'verbose_name_plural': 'Sizes',
            },
        ),
        migrations.CreateModel(
            name='StorageStatus',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'storage_status',
                'verbose_name': 'Storage status',
                'verbose_name_plural': 'Storage statuss',
            },
        ),
        migrations.CreateModel(
            name='StorageType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
                ('store_type_logo', models.CharField(max_length=50, verbose_name='Store type logo')),
            ],
            options={
                'db_table': 'storage_type',
                'verbose_name': 'Storage type',
                'verbose_name_plural': 'Storage types',
            },
        ),
        migrations.CreateModel(
            name='StorageWorkloadType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('max_num_of_prod_inst_hosts', models.IntegerField(verbose_name='Max num of prod inst hosts')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'storage_workload_type',
                'verbose_name': 'Storage workload type',
                'verbose_name_plural': 'Storage workload types',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionStatus',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'subscription_status',
                'verbose_name': 'Subscription status',
                'verbose_name_plural': 'Subscription statuss',
            },
        ),
        migrations.CreateModel(
            name='Suitability',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'suitability',
                'verbose_name': 'Suitability',
                'verbose_name_plural': 'SuitabilityS',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'supplier',
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'SupplierS',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('sap_sid', models.CharField(max_length=20, verbose_name='Sap sid')),
                ('lvm_serviceid', models.CharField(max_length=100, verbose_name='Lvm serviceid')),
                ('backup_enabled', models.BooleanField(verbose_name='Backup enabled')),
                ('highly_available', models.BooleanField(verbose_name='Highly available')),
                ('eu_data_privacy_support', models.BooleanField(verbose_name='Eu data privacy support')),
                ('disaster_recovery_enabled', models.BooleanField(verbose_name='Disaster recovery enabled')),
                ('hana_configuration', models.BooleanField(verbose_name='Hana configuration')),
                ('database_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DatabaseType', verbose_name='Database type')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
                ('disaster_recovery_infrastructure_tenancy_preference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DisasterRecoveryTenancy', verbose_name='Disaster recovery infrastructure tenancy preference')),
                ('lama_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='System_lama_host', to='SOD_LVM.Lvm', verbose_name='Lama host')),
                ('lvm_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='System_lvm_host', to='SOD_LVM.Lvm', verbose_name='Lvm host')),
                ('lvm_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LvmLevel', verbose_name='Lvm level')),
                ('migration_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MigrationState', verbose_name='Migration state')),
                ('order_tracking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OrderTracking', verbose_name='Order tracking')),
                ('primary_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SidOrigin', verbose_name='Primary system')),
                ('sap_offering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SapOffering', verbose_name='Sap offering')),
                ('service_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceLevel', verbose_name='Service level')),
                ('sid_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SidType', verbose_name='Sid type')),
                ('subscription_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SubscriptionStatus', verbose_name='Subscription status')),
            ],
            options={
                'db_table': 'system',
                'verbose_name': 'System',
                'verbose_name_plural': 'Systems',
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('display_name', models.CharField(max_length=50, verbose_name='Display name')),
                ('esl_customer_name', models.CharField(max_length=50, verbose_name='Esl customer name')),
                ('esl_company_id', models.CharField(max_length=50, verbose_name='Esl company id')),
                ('company_id_for_storage_naming', models.CharField(max_length=50, verbose_name='Company id for storage naming')),
                ('email_distribution', models.CharField(max_length=100, verbose_name='Email distribution')),
                ('hmco_action', models.CharField(choices=[('send_nothing', 'send_nothing'), ('send_email', 'send_email'), ('send_ticket', 'send_ticket')], max_length=50, verbose_name='Hmco action')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
                ('sidType', models.ManyToManyField(to='SOD_LVM.SidType', verbose_name='SidType')),
            ],
            options={
                'db_table': 'tenant',
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
            },
        ),
        migrations.CreateModel(
            name='TenantUserGroup',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('lifecycleactions', models.ManyToManyField(to='SOD_LVM.LifecycleAction', verbose_name='Lifecycleactions')),
                ('system', models.ManyToManyField(to='SOD_LVM.System', verbose_name='System')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant')),
            ],
            options={
                'db_table': 'tenant_user_group',
                'verbose_name': 'Tenant user group',
                'verbose_name_plural': 'Tenant user groups',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('sm9_endpoint', models.CharField(max_length=50, verbose_name='Sm9 endpoint')),
                ('billable', models.CharField(choices=[('Unknown', 'Unknown'), ('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Billable')),
                ('company_id', models.CharField(max_length=10, verbose_name='Company id')),
                ('location_id', models.CharField(max_length=10, verbose_name='Management region')),
                ('management_region', models.CharField(max_length=50, verbose_name='Management region')),
                ('user_id', models.CharField(max_length=100, verbose_name='User id')),
                ('emergency_change', models.CharField(choices=[('Unknown', 'Unknown'), ('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Emergency change')),
                ('ticket_id', models.CharField(max_length=30, verbose_name='Ticket id')),
                ('action_request_id', models.CharField(max_length=50, verbose_name='Action request id')),
                ('category', models.CharField(choices=[('HMCO', 'HMCO'), ('DR', 'DR'), ('EAO', 'EAO'), ('DB_STORAGE', 'DB_STORAGE'), ('CS_STORAGE', 'CS_STORAGE'), ('PAS_STORAGE', 'PAS_STORAGE')], max_length=15, verbose_name='Category')),
                ('created_on', models.DateTimeField(verbose_name='Created on')),
            ],
            options={
                'db_table': 'ticket',
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
            },
        ),
        migrations.CreateModel(
            name='TicketClosureCode',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
                ('test_mode', models.BooleanField(verbose_name='Test mode')),
            ],
            options={
                'db_table': 'ticket_closure_code',
                'verbose_name': 'Ticket closure code',
                'verbose_name_plural': 'Ticket closure codes',
            },
        ),
        migrations.CreateModel(
            name='TicketClosureCodeInterpretation',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'ticket_closure_code_interpretation',
                'verbose_name': 'Ticket closure code interpretation',
                'verbose_name_plural': 'Ticket closure code interpretations',
            },
        ),
        migrations.CreateModel(
            name='TicketImplementationStatus',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'ticket_implementation_status',
                'verbose_name': 'Ticket implementation status',
                'verbose_name_plural': 'Ticket implementation statuss',
            },
        ),
        migrations.CreateModel(
            name='TicketOrigin',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'ticket_origin',
                'verbose_name': 'Ticket origin',
                'verbose_name_plural': 'Ticket origins',
            },
        ),
        migrations.CreateModel(
            name='Tickettate',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'ticket_state',
                'verbose_name': 'Ticket state',
                'verbose_name_plural': 'Ticket states',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'ticket_type',
                'verbose_name': 'Ticket type',
                'verbose_name_plural': 'Ticket types',
            },
        ),
        migrations.CreateModel(
            name='Tier',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('cluster', models.ManyToManyField(to='SOD_LVM.Cluster', verbose_name='Cluster')),
                ('suitabilities', models.ManyToManyField(to='SOD_LVM.Suitability', verbose_name='Suitabilities')),
            ],
            options={
                'db_table': 'Tier',
                'verbose_name': 'Tier',
                'verbose_name_plural': 'Tiers',
            },
        ),
        migrations.CreateModel(
            name='Topology',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'topology',
                'verbose_name': 'Topology',
                'verbose_name_plural': 'Topologys',
            },
        ),
        migrations.CreateModel(
            name='Vcenter',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('host', models.CharField(max_length=50, verbose_name='Host')),
                ('ip', models.CharField(max_length=50, verbose_name='Ip')),
                ('username', models.CharField(max_length=50, verbose_name='Username')),
                ('password', models.CharField(max_length=50, verbose_name='Password')),
                ('port', models.IntegerField(verbose_name='Port')),
                ('vmware_dc', models.CharField(max_length=50, verbose_name='Vmware_dc')),
                ('asser_tag', models.CharField(max_length=100, verbose_name='Asser_tag')),
                ('capacity_team_model_name', models.CharField(max_length=100, verbose_name='Capacity_team_model_name')),
                ('capacity_team_device_registration_name', models.CharField(max_length=100, verbose_name='Capacity_team_device_registration_name')),
                ('annotation', models.TextField(verbose_name='Annotation')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
                ('lfecycle_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle_state')),
            ],
            options={
                'db_table': 'vcenter',
                'verbose_name': 'Vcenter',
                'verbose_name_plural': 'Vcenters',
            },
        ),
        migrations.CreateModel(
            name='Virtualization',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'virtualization',
                'verbose_name': 'Virtualization',
                'verbose_name_plural': 'Virtualizations',
            },
        ),
        migrations.CreateModel(
            name='Vla',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('url', models.URLField(verbose_name='Url')),
                ('username', models.CharField(max_length=20, verbose_name='Username')),
                ('password', models.CharField(max_length=20, verbose_name='Password')),
                ('lvm_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Lvm', verbose_name='Lvm host')),
            ],
            options={
                'db_table': 'Vla',
                'verbose_name': 'Vla',
                'verbose_name_plural': 'Vlas',
            },
        ),
        migrations.CreateModel(
            name='Vlan',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('vlanid', models.CharField(max_length=50, verbose_name='Vlanid')),
                ('only_for_eso4sap_use', models.BooleanField(verbose_name='Only for eso4sap use')),
                ('netword', models.CharField(max_length=20, verbose_name='Netword')),
                ('mask', models.CharField(max_length=20, verbose_name='Mask')),
                ('gateway', models.CharField(max_length=20, verbose_name='Gateway')),
                ('range_start', models.CharField(max_length=20, verbose_name='Range start')),
                ('range_end', models.CharField(max_length=20, verbose_name='Range end')),
                ('dns1', models.CharField(max_length=20, verbose_name='Dns1')),
                ('dns2', models.CharField(max_length=20, verbose_name='Dns2')),
                ('ntp', models.CharField(max_length=20, verbose_name='Ntp')),
                ('byoip_enabled', models.BooleanField(verbose_name='Byoip_enabled')),
                ('byoip_subnet', models.CharField(max_length=20, verbose_name='Byoip subnet')),
                ('byoip_range_start', models.CharField(max_length=20, verbose_name='Byoip range start')),
                ('byoip_range_end', models.CharField(max_length=20, verbose_name='Byoip range end')),
                ('public_ip_enabled', models.BooleanField(verbose_name='Public ip enabled')),
                ('public_ip_subnet', models.CharField(max_length=20, verbose_name='Public ip subnet')),
                ('public_ip_range_start', models.CharField(max_length=20, verbose_name='Public ip range start')),
                ('public_ip_range_end', models.CharField(max_length=20, verbose_name='Public ip range end')),
                ('load_balance_enabled', models.BooleanField(verbose_name='Load balance enabled')),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter')),
                ('lifecycle_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state')),
            ],
            options={
                'db_table': 'vlan',
                'verbose_name': 'Vlan',
                'verbose_name_plural': 'Vlans',
            },
        ),
        migrations.CreateModel(
            name='VlanRole',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'vlan_role',
                'verbose_name': 'Vlan role',
                'verbose_name_plural': 'Vlan roles',
            },
        ),
        migrations.CreateModel(
            name='VlanTriplet',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('hsr_vlan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VlanTriplet_hsr_vlan', to='SOD_LVM.Vlan', verbose_name='Hsr vlan')),
                ('internal_management_vlan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VlanTriplet_internal_management_vlan', to='SOD_LVM.Vlan', verbose_name='Internal management vlan')),
                ('lifecycle_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state')),
                ('production_vlan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VlanTriplet_production_vlan', to='SOD_LVM.Vlan', verbose_name='Production vlan')),
            ],
            options={
                'db_table': 'vlan_triplet',
                'verbose_name': 'Vlan triplet',
                'verbose_name_plural': 'Vlan triplets',
            },
        ),
        migrations.CreateModel(
            name='VlanType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'vlan_type',
                'verbose_name': 'Vlan type',
                'verbose_name_plural': 'Vlan types',
            },
        ),
        migrations.CreateModel(
            name='Vmnetwork',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('vlan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vlan', verbose_name='Vlan')),
            ],
            options={
                'db_table': 'vmnetwork',
                'verbose_name': 'Vmnetwork',
                'verbose_name_plural': 'Vmnetworks',
            },
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('wwn', models.CharField(max_length=100, verbose_name='Wwn')),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('size', models.IntegerField(verbose_name='Size')),
                ('comment', models.CharField(max_length=100, verbose_name='Comment')),
                ('datastore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Datastore', verbose_name='Datastore')),
                ('dpg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Cpg', verbose_name='Cpg')),
                ('encryption_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EncryptionState', verbose_name='Encryption state')),
                ('instance_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.InstanceHost', verbose_name='Instance host')),
                ('migration_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MigrationState', verbose_name='Migration state')),
                ('order_tracking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OrderTracking', verbose_name='Order tracking')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.StorageStatus', verbose_name='Status')),
            ],
            options={
                'db_table': 'volume',
                'verbose_name': 'Volume',
                'verbose_name_plural': 'Volumes',
            },
        ),
        migrations.CreateModel(
            name='VolumeGroup',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Service', verbose_name='Service')),
            ],
            options={
                'db_table': 'volume_group',
                'verbose_name': 'Volume group',
                'verbose_name_plural': 'Volume groups',
            },
        ),
        migrations.CreateModel(
            name='VolumeGroupFileSystem',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('mount_path', models.CharField(max_length=100, verbose_name='Mount path')),
                ('size', models.CharField(max_length=100, verbose_name='Size')),
                ('volume_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VolumeGroup', verbose_name='Volume group')),
            ],
            options={
                'db_table': 'volume_group_file_System',
                'verbose_name': 'Volume group file system',
                'verbose_name_plural': 'Volume group file systems',
            },
        ),
        migrations.CreateModel(
            name='VolumeGroupType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'volume_group_type',
                'verbose_name': 'Volume group types',
                'verbose_name_plural': 'Volume group types',
            },
        ),
        migrations.CreateModel(
            name='VolumeType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'volume_type',
                'verbose_name': 'Volume type',
                'verbose_name_plural': 'Volume types',
            },
        ),
        migrations.CreateModel(
            name='WorkloadType',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'workload_type',
                'verbose_name': 'Workload type',
                'verbose_name_plural': 'Workload types',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100, verbose_name='Display name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
            ],
            options={
                'db_table': 'zone',
                'verbose_name': 'Zone',
                'verbose_name_plural': 'Zones',
            },
        ),
        migrations.AddField(
            model_name='volumegroup',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VolumeGroupType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='volume',
            name='volume_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VolumeGroup', verbose_name='Volume group'),
        ),
        migrations.AddField(
            model_name='volume',
            name='volume_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VolumeType', verbose_name='Volume type'),
        ),
        migrations.AddField(
            model_name='vlan',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VlanRole', verbose_name='Role'),
        ),
        migrations.AddField(
            model_name='vlan',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='vlan',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VlanType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='vcenter',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Zone', verbose_name='Zone'),
        ),
        migrations.AddField(
            model_name='tier',
            name='workloads',
            field=models.ManyToManyField(to='SOD_LVM.WorkloadType', verbose_name='Workloads'),
        ),
        migrations.AddField(
            model_name='ticketclosurecode',
            name='interpretation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.TicketClosureCodeInterpretation', verbose_name='Interpretation'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='closure_code',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.TicketClosureCode', verbose_name='Closure code'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='implementation_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.TicketImplementationStatus', verbose_name='Implementation status'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='last_known_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tickettate', verbose_name='Last known state'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OrderTracking', verbose_name='Order'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.TicketOrigin', verbose_name='Origin'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.TicketType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='system',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='system',
            name='workload_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.WorkloadType', verbose_name='Workload type'),
        ),
        migrations.AddField(
            model_name='size',
            name='tenant',
            field=models.ManyToManyField(to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='size',
            name='tier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tier', verbose_name='Tier'),
        ),
        migrations.AddField(
            model_name='size',
            name='virtualization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Virtualization', verbose_name='Virtualization'),
        ),
        migrations.AddField(
            model_name='sidlvmlicenseevent',
            name='sid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.System', verbose_name='Sid'),
        ),
        migrations.AddField(
            model_name='serviceroledetail',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='service_vip',
            name='vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vlan', verbose_name='Vlan'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceRole', verbose_name='Service role'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_role_detail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceRoleDetail', verbose_name='Service role detail'),
        ),
        migrations.AddField(
            model_name='service',
            name='system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.System', verbose_name='System'),
        ),
        migrations.AddField(
            model_name='service',
            name='topology',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Topology', verbose_name='Topology'),
        ),
        migrations.AddField(
            model_name='ordertracking',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='operatingsystem',
            name='virtualization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Virtualization', verbose_name='Virtualization'),
        ),
        migrations.AddField(
            model_name='nictype',
            name='vlan_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VlanRole', verbose_name='Vlan_role'),
        ),
        migrations.AddField(
            model_name='lvm',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LvmType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='lifecycleaction',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleActionType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidvolume',
            name='migration_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MigrationState', verbose_name='Migration state'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidvolume',
            name='volume_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VolumeType', verbose_name='Volume type'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidvolume',
            name='volumegrouptype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.VolumeGroupType', verbose_name='Volumegrouptype'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidservice',
            name='service_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceRole', verbose_name='Service role'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidservice',
            name='service_role_detail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceRoleDetail', verbose_name='Service role detail'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidservice',
            name='sid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LamaTemplateTargetSid', verbose_name='Sid'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidservice',
            name='topology',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Topology', verbose_name='Topology'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehostnicconfig',
            name='mac_address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MacAddressPool', verbose_name='Mac address'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehostnicconfig',
            name='nic_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.NicType', verbose_name='Nic type'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehostnicconfig',
            name='vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vlan', verbose_name='Vlan'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='hsr_vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplateTargetSidInstanceHost_hsr_vlan', to='SOD_LVM.Vlan', verbose_name='Hsr vlan'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='internal_management_vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplateTargetSidInstanceHost_Internal_management_vlan', to='SOD_LVM.Vlan', verbose_name='Internal management vlan'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='migration_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MigrationState', verbose_name='Migration state'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='operatingSystem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OperatingSystem', verbose_name='OperatingSystem'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='production_vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplateTargetSidInstanceHost_production_vlan', to='SOD_LVM.Vlan', verbose_name='Production vlan'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Size', verbose_name='Size'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Virtualization', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsidinstancehost',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Zone', verbose_name='Zone'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='lvm_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LvmLevel', verbose_name='Lvm level'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='migration_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MigrationState', verbose_name='Migration state'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='primary_system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SidOrigin', verbose_name='Primary system'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='sap_offering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SapOffering', verbose_name='Sap offering'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='service_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ServiceLevel', verbose_name='Service level'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='sid_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.SidType', verbose_name='Sid type'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LamaTemplate', verbose_name='Template'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='lamatemplatetargetsid',
            name='workload_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.WorkloadType', verbose_name='Workload type'),
        ),
        migrations.AddField(
            model_name='lamatemplate',
            name='action',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleAction', verbose_name='Action'),
        ),
        migrations.AddField(
            model_name='lamatemplate',
            name='lama',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Lvm', verbose_name='Lama'),
        ),
        migrations.AddField(
            model_name='lamatemplate',
            name='refresh_using_sid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplate_refresh_using_sid', to='SOD_LVM.System', verbose_name='Refresh using sid'),
        ),
        migrations.AddField(
            model_name='lamatemplate',
            name='source_sid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplate_Source_sid', to='SOD_LVM.System', verbose_name='Source sid'),
        ),
        migrations.AddField(
            model_name='lamatemplate',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplate_state', to='SOD_LVM.LamaTemplateState', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='lamatemplate',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LamaTemplate_status', to='SOD_LVM.LamaTemplateStatus', verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='ipaddresspool',
            name='vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vlan', verbose_name='Vlan'),
        ),
        migrations.AddField(
            model_name='instancehostnicconfig',
            name='ip_address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.IpAddressPool', verbose_name='Ip address'),
        ),
        migrations.AddField(
            model_name='instancehostnicconfig',
            name='mac_address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MacAddressPool', verbose_name='Mac address'),
        ),
        migrations.AddField(
            model_name='instancehostnicconfig',
            name='nic_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.NicType', verbose_name='Nic type'),
        ),
        migrations.AddField(
            model_name='instancehostnicconfig',
            name='vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vlan', verbose_name='Vlan'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='fsr_vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='InstanceHost_Hsr_vlan', to='SOD_LVM.Vlan', verbose_name='Hsr vlan'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='hp3par',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Hp3par', verbose_name='Hp3par'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='internal_management_vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Internal_management_vlan', to='SOD_LVM.Vlan', verbose_name='Internal management vlan'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='migration_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.MigrationState', verbose_name='Migration state'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='operatingSystem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OperatingSystem', verbose_name='OperatingSystem'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='order_tracking',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OrderTracking', verbose_name='Order tracking'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='production_vlan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='InstanceHost_Production_vlan', to='SOD_LVM.Vlan', verbose_name='Production vlan'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Size', verbose_name='Size'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.HostState', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='suitability',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Suitability', verbose_name='Suitability'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Virtualization', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='instancehost',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Zone', verbose_name='Zone'),
        ),
        migrations.AddField(
            model_name='image',
            name='operatingSystem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.OperatingSystem', verbose_name='OperatingSystem'),
        ),
        migrations.AddField(
            model_name='image',
            name='vcenter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vcenter', verbose_name='Vcenter'),
        ),
        migrations.AddField(
            model_name='hp3parcapacity',
            name='tier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Hp3parTier', verbose_name='Tier'),
        ),
        migrations.AddField(
            model_name='hp3par',
            name='lifecycle_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state'),
        ),
        migrations.AddField(
            model_name='hp3par',
            name='storageworkload',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.StorageWorkloadType', verbose_name='Storageworkload'),
        ),
        migrations.AddField(
            model_name='hp3par',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Zone', verbose_name='Zone'),
        ),
        migrations.AddField(
            model_name='eventcode',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EventOrigin', verbose_name='Origin'),
        ),
        migrations.AddField(
            model_name='eventcode',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Eventource', verbose_name='Source'),
        ),
        migrations.AddField(
            model_name='eventcode',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Supplier', verbose_name='Supplier'),
        ),
        migrations.AddField(
            model_name='eventcode',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EventType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='event',
            name='code',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.EventCode', verbose_name='Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='datacenter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Datacenter'),
        ),
        migrations.AddField(
            model_name='event',
            name='sid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.System', verbose_name='Sid'),
        ),
        migrations.AddField(
            model_name='event',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Eventtatus', verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='event',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='event',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Ticket', verbose_name='Ticket'),
        ),
        migrations.AddField(
            model_name='esxhost',
            name='lifecycle_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle_state'),
        ),
        migrations.AddField(
            model_name='datastore',
            name='lifecycle_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle_state'),
        ),
        migrations.AddField(
            model_name='datastore',
            name='storage_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.StorageType', verbose_name='Storage type'),
        ),
        migrations.AddField(
            model_name='datastore',
            name='tenant',
            field=models.ManyToManyField(to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='customsize',
            name='tenant',
            field=models.ManyToManyField(to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='customsize',
            name='tier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tier', verbose_name='Tier'),
        ),
        migrations.AddField(
            model_name='cpg',
            name='hp3par',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Hp3par', verbose_name='Hp3par'),
        ),
        migrations.AddField(
            model_name='cpg',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='cpg',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.StorageType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='cpu_oversubscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ClusterCpuOversubscription', verbose_name='Cpu oversubscription'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='data_center',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.DataCenter', verbose_name='Data center'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='lifecycle_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.LifecycleState', verbose_name='Lifecycle state'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='memory_oversubscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.ClusterMemoryOversubscription', verbose_name='Memory oversubscription'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='serviceLevel',
            field=models.ManyToManyField(to='SOD_LVM.ServiceLevel', verbose_name='ServiceLevel'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='tenant',
            field=models.ManyToManyField(to='SOD_LVM.Tenant', verbose_name='Tenant'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='vcenter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SOD_LVM.Vcenter', verbose_name='Vcenter'),
        ),
    ]
